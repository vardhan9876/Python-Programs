# -*- coding: utf-8 -*-
"""Functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C-VW19fLgtfHUEo8xKafdR_584iaBmYm

Functions:
"""

#1.check Even or odd numbers ?

def even_or_odd(n):
  if n%2==0:
    return 'even number'
  else:
    return 'odd number'

n=int(input('Enter a num : '))
result=even_or_odd(n)
print(result)

# 2. check Prime number or not a prime number ?

def is_prime_Number(n):

	if n <= 1:
		return n,'Not a Prime number'

	for i in range(2, int(n/2)+1):
		if n % i == 0:
			return n, 'Not a prime number'
	return n, 'is a Prime number'
n = int(input())
print(is_prime_Number(n))

# 3. write a program for Positive_Or_Negative Number?

def Pos_or_Neg():
  if n>=0:
    return n, 'is a Positive Number'
  else:
    return n, 'is a Negative Number'

n=int(input('Enter a Number'))
res=Pos_or_Neg()
print(res)

#4. write a program to check eligible for vote or not?

def Vote():
  if age>=18:
    return age,'Eligible for Vote'
  else:
    return age,'Not Eligible for vote,because minor'

age=int(input('Enter a age: '))
print(Vote())

#5. write a program to print 1 to 10 mnumber?

def Numbers(n1,n2):
  empty_list=[]
  for i in range(n1,n2+1):
    empty_list.append(i)
  return (empty_list)

n1=int(input("Enter a number: "))
n2=int(input("Enter a number: "))
result=Numbers(n1,n2)
print(result)

#6. write a program to check leap year or not?

def Leaf_year():
  if ((year%4==0  and year%100!=0)or year%400==0):
    return ( year ,'is a Leaf Year')
  else:
    return (year ,"not a leaf year")

year=int(input('Enter a year: '))
print(Leaf_year())

# check palindrome number or not?

def is_Palindrome(n):
    temp=n
    rev=0
    while n>=1:
        rem=n%10
        rev=((rev*10)+rem)
        n=n//10
    if(temp==rev):
        return temp,'is Palindrome Number'
    else:
        return temp,'is not Palindrome Number'

n=int(input('Enter a Number: '))
result=is_Palindrome(n)
print(result)

# check Arm strong number or not?

def is_Arm_Strong(n):
  temp=n
  sum=0
  while n>0:
    rem=n%10
    sum=sum+rem**3
    n=n//10
  if(temp==sum):
    return temp,'is Arm strong number'
  else:
    return temp,'is not a Arm strong'
n=int(input('enter a number : '))
print(is_Arm_Strong(n))

# check Automorphic number or not

def is_Automorphic(n):
	if n< 0: n = -n
	squareNum = n*n
	temp = n
	count = 0
	while temp != 0:
		count += 1
		temp = int(temp/10)
	lastDigit = squareNum%pow(10, count)
	if lastDigit == n:
		return "Automorphic"
	else:
		return "Not Automorphic"

n=int(input('Enter a Number: '))
print(is_Automorphic(n))

# write a program for factorial?

def Factorial(n):
  fact=1
  for i in range(1,n+1):
    fact=fact*i
  return 'factorial  of ' ,n ,'is',fact



n=int(input('Enter a number: '))
print(Factorial(n))

# perfect number: a number whose sum of factors is equal to the number is called perfect number

def Perfect_number():
  temp=n
  sum=0
  i=1
  while i<n:
    if n % i == 0:
        sum += i

    i += 1

  if(sum==temp):
    return temp,'perfect number'
  else:
    return temp,'not a perfect number'
n=int(input('enter a number: '))
print(Perfect_number())

"""Built-in Functions:"""

# abs(): Returns the absolute values of a number
a=-36
print(abs(36))
# all():Returns True if all items in an iterable object are true
b=[1,2,3,4,56]
print(all(b))
#any(): Returns True if any item in an iterable object is true
print(any(b))
# ascii():
c='string'
print(ascii(c))